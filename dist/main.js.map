{"version":3,"sources":["webpack://codehomework-andrewyang/./src/dataParsing.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,KAAK,IAAI,MAAM;AAC5C,GAAG;AACH,6BAA6B,MAAM;AACnC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA,qBAAqB,oBAAoB;AACzC;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","file":"main.js","sourcesContent":["// CONSTANTS AND VARIABLES-------------------------\nconst inputBar = document.querySelector('#inputBar');\nconst searchBar = document.querySelector('#searchBar');\nconst resultsCtn = document.querySelector('.resultsCtn');\nconst goBtn = document.querySelector('.goBtn');\n\nlet message;\nlet search;\n\n// FUNCTIONS---------------------------------------\nfunction messageAndInputRetriever() {\n  // This function will pull the message from the input.\n  message = inputBar.value;\n  search = searchBar.value;\n}\n\nfunction resultRender(name, value) {\n  // Rendering results by creating an element and appending to parent.\n  const resultCtn = document.createElement('div');\n  resultCtn.classList.add('info');\n\n  if (name) {\n    resultCtn.innerHTML = `${name}: ${value}`;\n  } else {\n    resultCtn.innerHTML = `${value}`;\n  }\n\n  resultsCtn.appendChild(resultCtn);\n}\n\nfunction messageParser() {\n  let match = false;\n  // Removing any spaces and splitting the message by \"||\".\n  const splitMessage = message.replace(/\\s/g, '').split('||');\n\n  // This loop iterates through messages split by ||.\n  for (let i = 0; i < splitMessage.length; i += 1) {\n    // Splitting messages further by \"|\" into sections.\n    const section = splitMessage[i].split('|');\n\n    // Comparing if segment name matches search string.\n    if (search.toLowerCase() === section[0].toLowerCase()) {\n      match = true;\n      let name;\n      let value;\n      resultRender('', section[0]);\n\n      // Organizing the fields being sent to render.\n      section.slice(1).forEach((element) => {\n        name = element.slice(0, 3);\n        value = element.slice(3, element.length);\n        resultRender(name, value);\n      });\n    } else {\n      // This loop skips segment info and parses through the field info.\n      for (let j = 1; j < section.length; j += 1) {\n        let fieldname = [];\n        let fieldValue = [];\n\n        // \"Fieldname\" stores the first 3 letters of the field to compare to \"search\".\n\n        fieldname = section[j].split('').splice(0, 3).join('');\n        fieldValue = section[j].split('').splice(3).join('');\n\n        if (fieldname.toLowerCase() === search.toLowerCase()) {\n          match = true;\n          resultRender(fieldname, fieldValue);\n        }\n      }\n    }\n  }\n  if (match === false) {\n    resultRender('', 'No result found.');\n  }\n}\n\n// SCRIPT------------------------------------------\ngoBtn.addEventListener('click', (event) => {\n  event.preventDefault();\n  // remove old results\n  while (resultsCtn.firstChild) {\n    resultsCtn.removeChild(resultsCtn.firstChild);\n  }\n  messageAndInputRetriever();\n  messageParser();\n});\n"],"sourceRoot":""}